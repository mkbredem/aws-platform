---
- name: install aap from backup
  hosts: aap_demo_controller
  vars: 
    installer_url: 'https://www.dropbox.com/scl/fi/fxjbzrn64eclsdbxgohka/ansible-automation-platform-setup-bundle-2.4-1.1-x86_64.tar?rlkey=wv5w5iip4hoz2fxbzmuwvjk41&dl=0'
    installer_file_name: ansible-automation-platform-setup-bundle-2.4-1.1-x86_64.tar
    backup_tar_url: 'https://www.dropbox.com/scl/fi/x2ai7dzbtkclowvjoqt6x/ac_backup2023-10-25_version_2.4-1.tar.gz?rlkey=ao33mgq52aaszo6gqtk5wj39r&dl=0'
    backup_file_name: ac_backup2023-10-25_version_2.4-1.tar.gz #as it appears in dropbox
    aap_version: '2.4'
    rhel_os: "rhel-8"
    bundle: "bundled" # options "bundled" or "not_bundled"
    install_dir: /root

  tasks:
    - name: ensure aap repo installed
      ansible.builtin.yum_repository:
        name: ansible-automation-platform-{{aap_version}}-for-{{ rhel_os }}-x86_64-rpms
        description: Ansible Automation Platform {{ aap_version}} on {{ rhel_os }} Repo

    - name: Ensure install directory exists
      ansible.builtin.file:
        path: "{{install_dir}}/installer-{{aap_version}}-{{bundle}}"
        state: directory

#    - name: download and extract installer file from CDN
#      block: 
#        - name: download tar - CDN
#          get_url:
#            url: "{{installer_url}}"
#            dest: "/root"
#          register: tar_from_cdn
#
#        - name: extract installation tar file
#          command: tar -xzf {{tar_from_cdn.dest}} --strip-components=1 -C /root/install_aap_{{aap_version}}/
#          register: extraction_result
#    
#      when: "'access.cdn.redhat' in installer_url"

    - name: download and exxtract Installer from dropbox
      block:
        - name: download tar dropbox
          ansible.builtin.shell: >
            curl -o installer-{{aap_version}}-{{bundle}}.tar.gz   -X POST https://content.dropboxapi.com/2/files/download   
            --header "Authorization: Bearer {{access_token}}"   
            --header "Dropbox-API-Arg: {\"path\":\"/Apps/Automation_Controller/{{installer_file_name}}\"}"
          args:
            chdir: "{{install_dir}}"
          register: tar_from_dropbox

        - name: extract installation tar file
          command: tar -xf {{install_dir}}/installer-{{aap_version}}-{{bundle}}.tar.gz --strip-components=1 -C {{install_dir}}/installer-{{aap_version}}-{{bundle}}/
          register: extraction_result

      when: "'dropbox' in installer_url"

    - name: Add templates file to installation directory
      template:
        src: inventory{{aap_version}}.j2
        dest: "{{install_dir}}/installer-{{aap_version}}-{{bundle}}/inventory"

#    - name: Fetch HTML page
#      ansible.builtin.uri:
#        url: http://ec2-23-20-120-44.compute-1.amazonaws.com/
#      register: html_response
#
#    - name: HTML Status
#      debug:
#        var: html_response

    - name: Run setup.sh script
      ansible.builtin.shell: ./setup.sh
      args:
        chdir: "{{install_dir}}/installer-{{aap_version}}-{{bundle}}"

    - name: backup isntallation version to dropbox (needed for future restores)
      ansible.builtin.shell: >
        curl -X POST https://content.dropboxapi.com/2/files/upload 
        --header "Authorization: Bearer {{ access_token }}"
        --header "Dropbox-API-Arg: {\"path\": \"/Apps/Automation_Controller/{{tar.dest}}\",\"mode\": \"overwrite\",\"autorename\": true,\"mute\": false}" 
        --header "Content-Type: application/octet-stream" 
        --data-binary @{{tar.dest}}
      args:
        chdir: "{{ install_dir }}"
      tags: download
