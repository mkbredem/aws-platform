# considerations:
# where will private keys be stored 
#   - /home/<user>/.ssh on bastion?
#   - key storage service
# define users: who needs new keys
# define targets: what systems need the private keys
# modules:
#   - https://docs.ansible.com/ansible/latest/collections/community/crypto/openssh_keypair_module.html
#     This module allows one to (re)generate OpenSSH private and public keys. It uses ssh-keygen to generate keys.
# demo specific:
# provision 4 servers:
#   - bastion
#   - server1
#   - server2
#   - server3


- name: create users for demo purposes
  user: 
    name: "{{item}}"
    generate_ssh_key: true
  loop: "{{ users }}"
  register: r_new_user_data

- name: show user data
  debug: 
    var: r_new_user_data


#- name: 
#  authorized_keys: 
#    - n

#- name: create the local user, including SSH key
#  user:
#    name: "{{ username }}"
#    generate_ssh_key: true
#    ssh_key_comment: "{{ username }}@{{ ansible_fqdn }}"

#- name: create a directory to store the file
#  file:
#    name: "{{ username }}"
#    state: directory

#- name: copy the local user ssh key to temporary {{ username }} key
#  shell: 'cat /home/{{ username }}/.ssh/id_rsa.pub > {{ username }}/id_rsa.pub'

#- name: verify that file exists
#  command: ls -l {{ username }}/

#- name: setup remote host
#  hosts: ansible1
#  tasks:
#  - name: create remote user, no need for SSH key
#    user:
#      name: "{{ username }}"
#  - name: use authorized_key to set the password
#    authorized_key:
#      user: "{{ username }}"
#      key: "{{ lookup('file', './'+ username +'/id_rsa.pub') }}"
