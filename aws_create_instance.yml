---
- name: Provision instance in AWS
  hosts: localhost
  gather_facts: false
  vars:
    security_group_id: sg-079ebd58a00104d74
    ami_id:
      rhel84: ami-0635a8c4049019474
      rhel85: ami-06f1e6f8b3457ae7c
      windows2019: ami-041306c411c38a789
    instance_size: m4.xlarge
    vpc_id: vpc-0b41ab809d8ee56f6
    ssh_key_name: aws-rhpds-20211028
    region: us-east-2
    subnet_id: subnet-0f2f38197f3ed1263
    instance_count: 1

  collections: 
    - amazon.aws

  tasks:
    - name: provision ec2 instance in AWS
      block:
        - name: Provision Windows ec2 instance in AWS
          amazon.aws.ec2_instance:
            region: "{{ region }}"
            state: started
            key_name: "{{ ssh_key_name }}"
            security_group: "{{ security_group_id }}"
            instance_type: "{{ instance_size }}"
            tags: 
              Env: "{{ env_tag }}"
              App: "{{ app_tag }}"
              Name: "{{ name_tag }}"
            image_id: "{{ ami_id[image_name] }}"
            wait: true
            vpc_subnet_id: "{{ subnet_id }}"
            count: "{{ instance_count }}"
            network:
              assign_public_ip: yes
            user_data: | 
              <powershell>
              $admin = [adsi]("WinNT://./administrator, user")
              $admin.PSBase.Invoke("SetPassword", "myTempPassword123!")
              Invoke-Expression ((New-Object System.Net.Webclient).DownloadString('https://raw.githubusercontent.com/ansible/ansible/devel/examples/scripts/ConfigureRemotingForAnsible.ps1'))
              </powershell>
          register: ec2_instance_facts
          when: ami_id == "windows2019"

      rescue:
        - name: Provision RHEL ec2 instance in AWS
          amazon.aws.ec2_instance:
            region: "{{ region }}"
            state: started
            key_name: "{{ ssh_key_name }}"
            security_group: "{{ security_group_id }}"
            instance_type: "{{ instance_size }}"
            tags: 
              Env: "{{ env_tag }}"
              App: "{{ app_tag }}"
              Name: "{{ name_tag }}"
            image_id: "{{ ami_id[image_name] }}"
            wait: true
            vpc_subnet_id: "{{ subnet_id }}"
            count: "{{ instance_count }}"
            network:
              assign_public_ip: yes
          register: ec2_instance_facts      

    - name: initialize target_hosts as an empty list
      set_fact:
        target_hosts: []

    - name: load new instances into target_hosts list (used in future plays for config)
      set_stats:
        data: 
          target_hosts: "{{ target_hosts + [ item.public_dns_name ] }}"
      loop: "{{ ec2_instance_facts.instances }}"

    - name: show provisioned instances
      debug:  
        var: item.public_dns_name
      loop: "{{ ec2_instance_facts.instances }}"

    - name: give instance time to initialize before configuration
      ansible.builtin.wait_for: 
        timeout: 150

#    - name: wait until provisioned instances are in "running" status
#      amazon.aws.ec2_instance_info: 
#      register: r_instance_facts
#      until: r_instance_facts.instances.state.name = "running"
#      retries: 30
#      delay: 10

#    - name: Wait 600 seconds for target connection to become reachable/usable
#      wait_for_connection:

#    - name: Wait for system to receive commands
#      delegate_to: "{{ item }}"
#      command: id 
#      register: result
#      until: result.rc = 0
#      retries: 35
#      delay: 10
#      loop: "{{ target_hosts }}"



