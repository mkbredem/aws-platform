---
- name: Provision instance in AWS
  hosts: localhost
  gather_facts: false
# vars: defaults in group_vars/all/aws_vars.yml
  roles:
    - name: aws_vpc_init

  tasks:
    - name: Change image ID if running Windows
      ansible.builtin.set_fact:
        _image_id_: 'ami-04b707657b5bf6b20'
      when: image_name is match("win*")
    
    - name: Change image ID if running RHEL8
      ansible.builtin.set_fact:
        _image_id_: 'ami-046981daef262e1d8'
      when: image_name == "rhel88"
    
    - name: Change image ID if running RHEL9
      ansible.builtin.set_fact:
        _image_id_: 'ami-093e0758ef99ec8a4'
      when: image_name == "rhel92"

    - name: Create EC2 instance with public IP for RHEL
      amazon.aws.ec2_instance:
        name: "{{ item }}"
        key_name: "{{ _key_name_ }}"
        vpc_subnet_id: "{{ vpcsubnet.subnet.id }}"
        instance_type: "{{ _instance_type_ }}"
        security_group: "{{ _security_group_ }}_RHEL"
        state: running
        wait: true
        network:
          assign_public_ip: true
        image_id: "{{ ami_id[_region_][image_name] }}"
        region: "{{ _region_ }}"
        tags:
          Name: "{{ item }}"
          owner: "{{ owner }}"
          env: "{{ env }}"
          operating_system: "RHEL"
          usage: "{{vpc_prefix}}demos"
      loop: "{{ vm_names }}"
      when: image_name is match("rhel.*")
      register: ec2_instance_facts_rhel

    - name: ec2_instance_facts_rhel values
      debug:
        var: ec2_instance_facts_rhel

    - name: Create EC2 instance with public IP for Windows
      amazon.aws.ec2_instance:
        name: "{{ item }}"
        key_name: "{{ _key_name_ }}"
        vpc_subnet_id: "{{ vpcsubnet.subnet.id }}"
        instance_type: "{{ _instance_type_ }}"
        security_group: "{{ _security_group_ }}_Windows"
        state: running
        wait: true
        network:
          assign_public_ip: true
        image_id: "{{ _image_id_ }}"
        region: "{{ _region_ }}"
        user_data: "{{ lookup('template', 'userdata.txt.j2') }}"
        tags:
          Name: "{{ item }}"
          owner: "{{ owner }}"
          environment: "{{ env }}"
          operating_system: "Windows"
          usage: "mbredemedemos"
      loop: "{{ vm_names }}"
      when: image_name is match("win.*")
      register: ec2_instance_facts_win

    - name: initialize target_hosts as an empty list/array
      set_fact:
        target_hosts: []
    
    - name: allocate elastic IPs for production
      block:     
        - name: allocate eip for prod servers
          amazon.aws.ec2_eip:
            region: "{{ _region_ }}"
            device_id: "{{ item.instances[0].instance_id }}"
          loop: "{{ec2_instance_facts_rhel.results}}"
          register: eips    

#        - name: give public dns time to convert to eip allocated
#          ansible.builtin.wait_for: 
#            timeout: 150

        - name: show eip instance structures
          debug:
            var: eips
    
        - name: get eipinfo
          amazon.aws.ec2_eip_info:
            region: "{{ _region_ }}"
            filters:
              allocation-id: "{{ item.allocation_id }}"
          loop: "{{ eips.results }}"
          register: run_eips
    
        - name: show this runs eips
          debug:
            var: run_eips
        
        - name: load production RHEL instances into target_hosts list (used in future plays for config)
          when: image_name is match("rhel*")
          set_stats:
            data: 
              target_hosts: "{{ target_hosts + [ item.item.item.instances[0].public_dns_name ] }}"
          loop: "{{ run_eips.results }}"

        - name: target hosts for prod
          debug:
            msg: "{{ item.item.item.instances[0].public_dns_name }}"
          loop: "{{ run_eips.results }}"

      when: env_tag == "prod" 

    - name: set target hosts IPs for non-prod serverse
      block:        
        - name: load Windows instances into target_hosts list (used in future plays for config)
          when: image_name == "windows2019" 
          set_stats:
            data: 
              target_hosts: "{{ target_hosts + [ item.public_dns_name ] }}"
          loop: "{{ ec2_instance_facts_win.results[0].instances }}"
        
        - name: load non-production RHEL instances into target_hosts list (used in future plays for config)
          when: image_name is match("rhel*")
          set_stats:
            data: 
              target_hosts: "{{ target_hosts + [ item.public_dns_name ] }}"
          loop: "{{ ec2_instance_facts_rhel.results[0].instances }}"
      when: env_tag != "prod"  
    

    
    
    
